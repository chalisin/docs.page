#
# Copyright (c) 2016-present Invertase Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this library except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:latest || exit 0
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd ${_ROOT_DIR}
        gcloud container clusters get-credentials --zone "${_KUBE_ZONE}" "${_KUBE_NAME}"
        gcloud debug source gen-repo-info-file || exit 0
  - name: 'gcr.io/cloud-builders/docker'
    dir: .
    args: [
        'build',
        '-f', 'bundler/bundler.dockerfile',
        '--build-arg', 'ROOT_DIR=${_ROOT_DIR}',
        '--cache-from', 'gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:latest',
        '-t', 'gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:$COMMIT_SHA',
        '-t', 'gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:latest',
        '.'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'push', 'gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:$COMMIT_SHA' ]

  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials --zone "${_KUBE_ZONE}" "${_KUBE_NAME}"
        if kubectl get namespaces ${_KUBE_NAMESPACE}; then
          echo Namespace found '${_KUBE_NAMESPACE}'
        else
          echo Creating a new namespace called '${_KUBE_NAMESPACE}'
        cat <<EOF | kubectl create -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${_KUBE_NAMESPACE}
        EOF
        fi
        # Create if does not exist, or replace if exists.
        if kubectl --namespace=${_KUBE_NAMESPACE} get services ${_DEPLOYMENT_NAME}; then
          echo Patching existing deplyoment.
          kubectl --namespace=${_KUBE_NAMESPACE} set image deployment.v1.apps/${_DEPLOYMENT_NAME} ${_DEPLOYMENT_NAME}=gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:$COMMIT_SHA || exit 1
        else
          echo Creating a new deplyoment.
          sed -i -e '/gcr.io\/project\/example/s//'"gcr.io\/$PROJECT_ID\/${_DEPLOYMENT_NAME}:$COMMIT_SHA"'/g' bundler/bundler.k8s.yaml
          kubectl create -f bundler/bundler.k8s.yaml || exit 1
        fi
images:
  - 'gcr.io/$PROJECT_ID/${_DEPLOYMENT_NAME}:latest'
